const Razorpay = require('razorpay');
const crypto = require('crypto');
const nodemailer = require('nodemailer');
require('dotenv').config();

const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_KEY_SECRET,
});

const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

exports.createOrder = async (req, res) => {
  try {
    console.log('Received body:', req.body); // Debug log
    const { amount, beneficiaryId, donorName, donorEmail, donorPhone } = req.body;
    if (!amount) {
      return res.status(400).json({ success: false, error: 'Amount is required' });
    }
    if (typeof amount !== 'number' || amount <= 0) {
      return res.status(400).json({ success: false, error: 'Invalid amount' });
    }
    // Use dummy beneficiaryId if not provided
    const safeBeneficiaryId = beneficiaryId || 'default-beneficiary';
    const shortBeneficiaryId = safeBeneficiaryId.slice(0, 8);
    const receipt = `don_${Date.now()}_${shortBeneficiaryId}`;
    const order = await razorpay.orders.create({
      amount: amount * 100,
      currency: 'INR',
      receipt,
      notes: {
        beneficiaryId: safeBeneficiaryId,
        donorName: donorName || 'Anonymous',
        donorEmail: donorEmail || '',
        donorPhone: donorPhone || '',
      },
    });
    if (!order.id) throw new Error('Order ID not generated by Razorpay');
    res.json({
      success: true,
      data: {
        orderId: order.id,
        amount: order.amount,
        currency: order.currency,
        keyId: process.env.RAZORPAY_KEY_ID,
      },
    });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Failed to create payment order', details: error.message });
  }
};

exports.verifyPayment = async (req, res) => {
  try {
    const { orderId, paymentId, signature, beneficiaryId, donorName, donorEmail, donorPhone, amount } = req.body;
    if (!orderId || !paymentId || !signature) {
      return res.status(400).json({ success: false, error: 'Missing required payment details' });
    }
    const generatedSignature = crypto
      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)
      .update(`${orderId}|${paymentId}`)
      .digest('hex');
    if (generatedSignature !== signature) {
      return res.status(400).json({ success: false, error: 'Invalid payment signature' });
    }
    // Skip DB duplicate check and saving
    // Always send emails
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: donorEmail,
      subject: 'Thank You for Your Donation to Project Sitaare',
      html: `
        <h2>Thank You, ${donorName}!</h2>
        <p>Your donation of ₹${(amount / 100).toLocaleString()} has been successfully received.</p>
        <p><strong>Details:</strong></p>
        <ul>
          <li>Order ID: ${orderId}</li>
          <li>Payment ID: ${paymentId}</li>
          <li>Beneficiary: Child Education Fund</li>
          <li>Date: ${new Date().toLocaleString()}</li>
        </ul>
        <p>Your support helps us empower underprivileged children through education.</p>
        <p>Best regards,<br>Team Sitaare</p>
      `,
    };
    try {
      await transporter.sendMail(mailOptions);
      // Send to owner
      const ownerMailOptions = {
        from: process.env.EMAIL_USER,
        to: 'akashpatelyo2@gmail.com',
        subject: `New Donation Received from ${donorName || 'Anonymous'}`,
        html: `
          <h2>New Donation Received</h2>
          <p><strong>Donor:</strong> ${donorName || 'Anonymous'}</p>
          <p><strong>Amount:</strong> ₹${(amount / 100).toLocaleString()}</p>
          <ul>
            <li>Order ID: ${orderId}</li>
            <li>Payment ID: ${paymentId}</li>
            <li>Email: ${donorEmail}</li>
            <li>Phone: ${donorPhone}</li>
            <li>Date: ${new Date().toLocaleString()}</li>
          </ul>
          <p>This is an automated notification for your records.</p>
        `,
      };
      await transporter.sendMail(ownerMailOptions);
    } catch (emailError) {}
    res.json({ success: true, message: 'Payment verified and donation recorded' });
  } catch (error) {
    res.status(500).json({ success: false, error: 'Failed to verify payment', details: error.message });
  }
};

exports.paymentAuth = async (req, res) => {
  try {
    const { paymentId } = req.body;
    if (!paymentId) {
      return res.status(400).json({ success: false, error: 'Payment ID required' });
    }
    const payment = await razorpay.payments.fetch(paymentId);
    if (payment.status === 'captured') {
      res.json({ success: true, status: 'captured', payment });
    } else if (payment.status === 'failed') {
      res.json({ success: false, status: 'failed', error: payment.error_description });
    } else {
      res.json({ success: false, status: payment.status });
    }
  } catch (error) {
    res.status(500).json({ success: false, error: 'Failed to fetch payment status', details: error.message });
  }
};

exports.webhook = async (req, res) => {
  try {
    const webhookSecret = process.env.RAZORPAY_WEBHOOK_SECRET;
    const signature = req.headers['x-razorpay-signature'];
    const generatedSignature = crypto
      .createHmac('sha256', webhookSecret)
      .update(JSON.stringify(req.body))
      .digest('hex');
    if (generatedSignature !== signature) {
      return res.status(400).json({ status: 'error', message: 'Invalid signature' });
    }
    const event = req.body.event;
    if (event === 'payment.captured') {
      const { payment, order } = req.body.payload;
      const paymentId = payment.entity.id;
      const orderId = order.entity.id;
      const amount = order.entity.amount / 100;
      const { beneficiaryId, donorName, donorEmail, donorPhone } = order.entity.notes;
      // Skip DB duplicate check and saving
      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: donorEmail,
        subject: 'Thank You for Your Donation to Project Sitaare',
        html: `
          <h2>Thank You, ${donorName}!</h2>
          <p>Your donation of ₹${amount.toLocaleString()} has been successfully received.</p>
          <p><strong>Details:</strong></p>
          <ul>
            <li>Order ID: ${orderId}</li>
            <li>Payment ID: ${paymentId}</li>
            <li>Beneficiary: Child Education Fund</li>
            <li>Date: ${new Date().toLocaleString()}</li>
          </ul>
          <p>Your support helps us empower underprivileged children through education.</p>
          <p>Best regards,<br>Team Sitaare</p>
        `,
      };
      try {
        await transporter.sendMail(mailOptions);
        // Send to owner
        const ownerMailOptions = {
          from: process.env.EMAIL_USER,
          to: 'akashpatelyo2@gmail.com',
          subject: `New Donation Received from ${donorName || 'Anonymous'}`,
          html: `
            <h2>New Donation Received</h2>
            <p><strong>Donor:</strong> ${donorName || 'Anonymous'}</p>
            <p><strong>Amount:</strong> ₹${amount.toLocaleString()}</p>
            <ul>
              <li>Order ID: ${orderId}</li>
              <li>Payment ID: ${paymentId}</li>
              <li>Email: ${donorEmail}</li>
              <li>Phone: ${donorPhone}</li>
              <li>Date: ${new Date().toLocaleString()}</li>
            </ul>
            <p>This is an automated notification for your records.</p>
          `,
        };
        await transporter.sendMail(ownerMailOptions);
      } catch (emailError) {}
    }
    res.json({ status: 'success' });
  } catch (error) {
    res.status(500).json({ status: 'error', message: 'Webhook processing failed' });
  }
};
