const express = require('express');
const router = express.Router();
const Razorpay = require('razorpay');
const crypto = require('crypto');
const Donation = require('../models/Donation');
const Beneficiary = require('../models/Beneficiary');
const nodemailer = require('nodemailer');
require('dotenv').config();

const razorpay = new Razorpay({
  key_id: process.env.RAZORPAY_KEY_ID,
  key_secret: process.env.RAZORPAY_KEY_SECRET,
});

// Email transporter setup
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS,
  },
});

// Create payment order
router.post('/create-order', async (req, res) => {
  try {
    const { amount, beneficiaryId, donorName, donorEmail, donorPhone } = req.body;

    if (!amount || !beneficiaryId) {
      return res.status(400).json({ success: false, error: 'Amount and beneficiary ID are required' });
    }

    if (typeof amount !== 'number' || amount <= 0) {
      return res.status(400).json({ success: false, error: 'Invalid amount' });
    }

    console.log('Checking beneficiaryId:', beneficiaryId);
    const beneficiary = await Beneficiary.findById(beneficiaryId);
    if (!beneficiary) {
      return res.status(404).json({ success: false, error: 'Beneficiary not found' });
    }
    console.log('Beneficiary found:', beneficiary);

    const shortBeneficiaryId = beneficiaryId.slice(0, 8);
    const receipt = `don_${Date.now()}_${shortBeneficiaryId}`;
    console.log('Creating Razorpay order with receipt:', receipt, 'length:', receipt.length);
    const order = await razorpay.orders.create({
      amount: amount * 100, // Convert to paise
      currency: 'INR',
      receipt,
      notes: {
        beneficiaryId,
        donorName: donorName || 'Anonymous',
        donorEmail: donorEmail || '',
        donorPhone: donorPhone || '',
      },
    });
    console.log('Razorpay order created:', order);

    if (!order.id) {
      throw new Error('Order ID not generated by Razorpay');
    }

    res.json({
      success: true,
      data: {
        orderId: order.id,
        amount: order.amount,
        currency: order.currency,
        keyId: process.env.RAZORPAY_KEY_ID,
      },
    });
  } catch (error) {
    console.error('Order creation error:', JSON.stringify(error, null, 2));
    res.status(500).json({ success: false, error: 'Failed to create payment order', details: error.message });
  }
});

// Verify payment (frontend-initiated)
router.post('/verify-payment', async (req, res) => {
  try {
    const { orderId, paymentId, signature, beneficiaryId, donorName, donorEmail, donorPhone, amount } = req.body;

    if (!orderId || !paymentId || !signature) {
      return res.status(400).json({ success: false, error: 'Missing required payment details' });
    }

    const generatedSignature = crypto
      .createHmac('sha256', process.env.RAZORPAY_KEY_SECRET)
      .update(`${orderId}|${paymentId}`)
      .digest('hex');

    if (generatedSignature !== signature) {
      return res.status(400).json({ success: false, error: 'Invalid payment signature' });
    }

    const existingDonation = await Donation.findOne({ paymentId });
    if (existingDonation) {
      return res.json({ success: true, message: 'Payment already recorded' });
    }

    const donation = new Donation({
      beneficiaryId,
      amount: amount / 100,
      donorName,
      donorEmail,
      donorPhone,
      paymentId,
      orderId,
      paymentStatus: 'completed',
    });
    await donation.save();
    console.log('Payment verified and donation saved:', donation);

    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: donorEmail,
      subject: 'Thank You for Your Donation to Project Sitaare',
      html: `
        <h2>Thank You, ${donorName}!</h2>
        <p>Your donation of ₹${(amount / 100).toLocaleString()} has been successfully received.</p>
        <p><strong>Details:</strong></p>
        <ul>
          <li>Order ID: ${orderId}</li>
          <li>Payment ID: ${paymentId}</li>
          <li>Beneficiary: Child Education Fund</li>
          <li>Date: ${new Date().toLocaleString()}</li>
        </ul>
        <p>Your support helps us empower underprivileged children through education.</p>
        <p>Best regards,<br>Team Sitaare</p>
      `,
    };

    try {
      await transporter.sendMail(mailOptions);
      console.log('Confirmation email sent to:', donorEmail);
    } catch (emailError) {
      console.error('Email sending error:', emailError);
    }

    res.json({ success: true, message: 'Payment verified and donation recorded' });
  } catch (error) {
    console.error('Payment verification error:', JSON.stringify(error, null, 2));
    res.status(500).json({ success: false, error: 'Failed to verify payment', details: error.message });
  }
});

// Payment authorization check
router.post('/payment-auth', async (req, res) => {
  try {
    const { paymentId } = req.body;
    if (!paymentId) {
      return res.status(400).json({ success: false, error: 'Payment ID required' });
    }

    const payment = await razorpay.payments.fetch(paymentId);
    console.log('Payment status:', payment);

    if (payment.status === 'captured') {
      res.json({ success: true, status: 'captured', payment });
    } else if (payment.status === 'failed') {
      res.json({ success: false, status: 'failed', error: payment.error_description });
    } else {
      res.json({ success: false, status: payment.status });
    }
  } catch (error) {
    console.error('Payment auth error:', JSON.stringify(error, null, 2));
    res.status(500).json({ success: false, error: 'Failed to fetch payment status', details: error.message });
  }
});

// Webhook endpoint
router.post('/webhook', async (req, res) => {
  try {
    const webhookSecret = process.env.RAZORPAY_WEBHOOK_SECRET;
    const signature = req.headers['x-razorpay-signature'];

    const generatedSignature = crypto
      .createHmac('sha256', webhookSecret)
      .update(JSON.stringify(req.body))
      .digest('hex');

    if (generatedSignature !== signature) {
      console.error('Invalid webhook signature');
      return res.status(400).json({ status: 'error', message: 'Invalid signature' });
    }

    const event = req.body.event;
    console.log('Webhook event received:', event);

    if (event === 'payment.captured') {
      const { payment, order } = req.body.payload;
      const paymentId = payment.entity.id;
      const orderId = order.entity.id;
      const amount = order.entity.amount / 100;
      const { beneficiaryId, donorName, donorEmail, donorPhone } = order.entity.notes;

      const existingDonation = await Donation.findOne({ paymentId });
      if (existingDonation) {
        console.log('Duplicate donation, skipping:', paymentId);
        return res.json({ status: 'success', message: 'Duplicate payment ignored' });
      }

      const donation = new Donation({
        beneficiaryId,
        amount,
        donorName,
        donorEmail,
        donorPhone,
        paymentId,
        orderId,
        paymentStatus: 'completed',
      });
      await donation.save();
      console.log('Webhook donation saved:', donation);

      const mailOptions = {
        from: process.env.EMAIL_USER,
        to: donorEmail,
        subject: 'Thank You for Your Donation to Project Sitaare',
        html: `
          <h2>Thank You, ${donorName}!</h2>
          <p>Your donation of ₹${amount.toLocaleString()} has been successfully received.</p>
          <p><strong>Details:</strong></p>
          <ul>
            <li>Order ID: ${orderId}</li>
            <li>Payment ID: ${paymentId}</li>
            <li>Beneficiary: Child Education Fund</li>
            <li>Date: ${new Date().toLocaleString()}</li>
          </ul>
          <p>Your support helps us empower underprivileged children through education.</p>
          <p>Best regards,<br>Team Sitaare</p>
        `,
      };

      try {
        await transporter.sendMail(mailOptions);
        console.log('Webhook confirmation email sent to:', donorEmail);
      } catch (emailError) {
        console.error('Webhook email error:', emailError);
      }
    } else if (event === 'payment.failed') {
      const { payment, order } = req.body.payload;
      const paymentId = payment.entity.id;
      const orderId = order.entity.id;
      const errorDescription = payment.entity.error_description || 'Payment failed';
      console.log('Payment failed:', { paymentId, orderId, errorDescription });

      // Optionally save failed payment to MongoDB
      const donation = new Donation({
        beneficiaryId: order.entity.notes.beneficiaryId,
        amount: order.entity.amount / 100,
        donorName: order.entity.notes.donorName,
        donorEmail: order.entity.notes.donorEmail,
        donorPhone: order.entity.notes.donorPhone,
        paymentId,
        orderId,
        paymentStatus: 'failed',
        error: errorDescription,
      });
      await donation.save();
      console.log('Webhook failed donation saved:', donation);
    }

    res.json({ status: 'success' });
  } catch (error) {
    console.error('Webhook error:', JSON.stringify(error, null, 2));
    res.status(500).json({ status: 'error', message: 'Webhook processing failed' });
  }
});

module.exports = router;